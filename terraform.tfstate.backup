{
    "version": 3,
    "terraform_version": "0.11.3",
    "serial": 2,
    "lineage": "14191c07-9b4d-47db-983b-c0081e40d48f",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.cached-container-linux-install-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "118903fa3e2bbdacfc26747feaf00c135f714d098dc4361bb36190a7749c239b",
                        "attributes": {
                            "id": "118903fa3e2bbdacfc26747feaf00c135f714d098dc4361bb36190a7749c239b",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://doom.fiisoft.net:8888/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1520.8.0 \\\n            -o \"\" \\\n            -b http://doom.fiisoft.net:8888/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://doom.fiisoft.net:8888/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1520.8.0",
                            "vars.ignition_endpoint": "http://doom.fiisoft.net:8888/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.cached-container-linux-install-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "118903fa3e2bbdacfc26747feaf00c135f714d098dc4361bb36190a7749c239b",
                        "attributes": {
                            "id": "118903fa3e2bbdacfc26747feaf00c135f714d098dc4361bb36190a7749c239b",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://doom.fiisoft.net:8888/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1520.8.0 \\\n            -o \"\" \\\n            -b http://doom.fiisoft.net:8888/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://doom.fiisoft.net:8888/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1520.8.0",
                            "vars.ignition_endpoint": "http://doom.fiisoft.net:8888/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.cached-container-linux-install-configs.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "118903fa3e2bbdacfc26747feaf00c135f714d098dc4361bb36190a7749c239b",
                        "attributes": {
                            "id": "118903fa3e2bbdacfc26747feaf00c135f714d098dc4361bb36190a7749c239b",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://doom.fiisoft.net:8888/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1520.8.0 \\\n            -o \"\" \\\n            -b http://doom.fiisoft.net:8888/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://doom.fiisoft.net:8888/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1520.8.0",
                            "vars.ignition_endpoint": "http://doom.fiisoft.net:8888/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.cached-container-linux-install-configs.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "118903fa3e2bbdacfc26747feaf00c135f714d098dc4361bb36190a7749c239b",
                        "attributes": {
                            "id": "118903fa3e2bbdacfc26747feaf00c135f714d098dc4361bb36190a7749c239b",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://doom.fiisoft.net:8888/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1520.8.0 \\\n            -o \"\" \\\n            -b http://doom.fiisoft.net:8888/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://doom.fiisoft.net:8888/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1520.8.0",
                            "vars.ignition_endpoint": "http://doom.fiisoft.net:8888/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.cached-container-linux-install-configs.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "118903fa3e2bbdacfc26747feaf00c135f714d098dc4361bb36190a7749c239b",
                        "attributes": {
                            "id": "118903fa3e2bbdacfc26747feaf00c135f714d098dc4361bb36190a7749c239b",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://doom.fiisoft.net:8888/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1520.8.0 \\\n            -o \"\" \\\n            -b http://doom.fiisoft.net:8888/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://doom.fiisoft.net:8888/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1520.8.0",
                            "vars.ignition_endpoint": "http://doom.fiisoft.net:8888/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.container-linux-install-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "fed5e8823801c39765cf2ef8dc89eec7dadb5946fa4372c4e7bb607266ab8237",
                        "attributes": {
                            "id": "fed5e8823801c39765cf2ef8dc89eec7dadb5946fa4372c4e7bb607266ab8237",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://doom.fiisoft.net:8888/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1520.8.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1520.8.0",
                            "vars.ignition_endpoint": "http://doom.fiisoft.net:8888/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.container-linux-install-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "fed5e8823801c39765cf2ef8dc89eec7dadb5946fa4372c4e7bb607266ab8237",
                        "attributes": {
                            "id": "fed5e8823801c39765cf2ef8dc89eec7dadb5946fa4372c4e7bb607266ab8237",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://doom.fiisoft.net:8888/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1520.8.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1520.8.0",
                            "vars.ignition_endpoint": "http://doom.fiisoft.net:8888/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.container-linux-install-configs.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "fed5e8823801c39765cf2ef8dc89eec7dadb5946fa4372c4e7bb607266ab8237",
                        "attributes": {
                            "id": "fed5e8823801c39765cf2ef8dc89eec7dadb5946fa4372c4e7bb607266ab8237",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://doom.fiisoft.net:8888/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1520.8.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1520.8.0",
                            "vars.ignition_endpoint": "http://doom.fiisoft.net:8888/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.container-linux-install-configs.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "fed5e8823801c39765cf2ef8dc89eec7dadb5946fa4372c4e7bb607266ab8237",
                        "attributes": {
                            "id": "fed5e8823801c39765cf2ef8dc89eec7dadb5946fa4372c4e7bb607266ab8237",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://doom.fiisoft.net:8888/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1520.8.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1520.8.0",
                            "vars.ignition_endpoint": "http://doom.fiisoft.net:8888/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.container-linux-install-configs.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "fed5e8823801c39765cf2ef8dc89eec7dadb5946fa4372c4e7bb607266ab8237",
                        "attributes": {
                            "id": "fed5e8823801c39765cf2ef8dc89eec7dadb5946fa4372c4e7bb607266ab8237",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://doom.fiisoft.net:8888/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1520.8.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1520.8.0",
                            "vars.ignition_endpoint": "http://doom.fiisoft.net:8888/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.controller-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "9187a72f57503377b90a09acd719be97fb2bfc70bad9d5c2b66eb38240b5b4ed",
                        "attributes": {
                            "id": "9187a72f57503377b90a09acd719be97fb2bfc70bad9d5c2b66eb38240b5b4ed",
                            "rendered": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=node1\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://node1.kb-01.fiisoft.net:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://node1.kb-01.fiisoft.net:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=node1=https://node1.kb-01.fiisoft.net:2380,node2=https://node2.kb-01.fiisoft.net:2380\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns= \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=node1.kb-01.fiisoft.net \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          node1.kb-01.fiisoft.net\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $RKT_OPTS \\\n            ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan\n",
                            "template": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=${etcd_name}\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${domain_name}:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${domain_name}:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=${etcd_initial_cluster}\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"$${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"$${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"$${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $$RKT_OPTS \\\n            $${BOOTKUBE_ACI}:$${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n",
                            "vars.%": "7",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "node1.kb-01.fiisoft.net",
                            "vars.etcd_initial_cluster": "node1=https://node1.kb-01.fiisoft.net:2380,node2=https://node2.kb-01.fiisoft.net:2380",
                            "vars.etcd_name": "node1",
                            "vars.k8s_dns_service_ip": "",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.controller-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "bbb79891d06eccf78b7b391a104ee04b6f98809de619655865888daf9f9789a1",
                        "attributes": {
                            "id": "bbb79891d06eccf78b7b391a104ee04b6f98809de619655865888daf9f9789a1",
                            "rendered": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=node2\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://node2.kb-01.fiisoft.net:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://node2.kb-01.fiisoft.net:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=node1=https://node1.kb-01.fiisoft.net:2380,node2=https://node2.kb-01.fiisoft.net:2380\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns= \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=node2.kb-01.fiisoft.net \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          node2.kb-01.fiisoft.net\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $RKT_OPTS \\\n            ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan\n",
                            "template": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=${etcd_name}\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${domain_name}:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${domain_name}:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=${etcd_initial_cluster}\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"$${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"$${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"$${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $$RKT_OPTS \\\n            $${BOOTKUBE_ACI}:$${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n",
                            "vars.%": "7",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "node2.kb-01.fiisoft.net",
                            "vars.etcd_initial_cluster": "node1=https://node1.kb-01.fiisoft.net:2380,node2=https://node2.kb-01.fiisoft.net:2380",
                            "vars.etcd_name": "node2",
                            "vars.k8s_dns_service_ip": "",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.worker-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "c3565d343d7568c5729aea6d9051f44b57287325792e03808942fa9d25a4b11c",
                        "attributes": {
                            "id": "c3565d343d7568c5729aea6d9051f44b57287325792e03808942fa9d25a4b11c",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns= \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=node3.kb-01.fiisoft.net \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          node3.kb-01.fiisoft.net\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "node3.kb-01.fiisoft.net",
                            "vars.k8s_dns_service_ip": "",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.worker-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "e44438580bc60f5455952ca5a4b1f5650b8aa0e73fd0ea55d3aa5f81522bb86e",
                        "attributes": {
                            "id": "e44438580bc60f5455952ca5a4b1f5650b8aa0e73fd0ea55d3aa5f81522bb86e",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns= \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=node4.kb-01.fiisoft.net \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          node4.kb-01.fiisoft.net\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "node4.kb-01.fiisoft.net",
                            "vars.k8s_dns_service_ip": "",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.worker-configs.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dc06c233ade6f03a54e5157f86ce205290893f30228ad5afd73617bd9edf6544",
                        "attributes": {
                            "id": "dc06c233ade6f03a54e5157f86ce205290893f30228ad5afd73617bd9edf6544",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns= \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=node5.kb-01.fiisoft.net \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          node5.kb-01.fiisoft.net\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "node5.kb-01.fiisoft.net",
                            "vars.k8s_dns_service_ip": "",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "local_file.workers.0": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "6f2719ee9b7c93e9367061778b41fbc940d65185",
                        "attributes": {
                            "content": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns= \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=node3.kb-01.fiisoft.net \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          node3.kb-01.fiisoft.net\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan\n\n",
                            "filename": "./assets/kb01-worker-node3",
                            "id": "6f2719ee9b7c93e9367061778b41fbc940d65185"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.workers.1": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "7f52b32c7f711a1e654001f9ae7846269fb5601a",
                        "attributes": {
                            "content": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns= \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=node4.kb-01.fiisoft.net \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          node4.kb-01.fiisoft.net\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan\n\n",
                            "filename": "./assets/kb01-worker-node4",
                            "id": "7f52b32c7f711a1e654001f9ae7846269fb5601a"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                },
                "local_file.workers.2": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "d99229680f471ef2d62bbf957e84fb8c5e6b4bc2",
                        "attributes": {
                            "content": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns= \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=node5.kb-01.fiisoft.net \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.9.4\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          node5.kb-01.fiisoft.net\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7cyhhhowluDtBnq3cw6opWeuD/AtwFWguGzwKwRZdlGjsNEv7hrsYeee6Cd82B8/pYdXX/e1Lg02hrmBnunvaB/BZD1Kb7IGvzplOjeJiaFqQvW6QMyWd1pt7ZiHmzyZ0uEBgBsgnblBink+25xqAb8gJD5fHVdzT8aEP8M3gs3dMScfhbxWIPC/a8cyzQ/8khNPdyQtaC0eEmXUHGhNsWnDmQv47lDaKjMi+AsoRxrtceGokWg6a9D/IGsxtKFMkMB/RM83UH/Yjcw9HxQPcKDUWEnnhMPGGGuPwQmikDdsipOT7RzFQZhF2MgNp7dwcnpxzp/sT1KW54L6ZjELP hoangddt@AdministorsiMac.fiisoft.lan\n\n",
                            "filename": "./assets/kb01-worker-node5",
                            "id": "d99229680f471ef2d62bbf957e84fb8c5e6b4bc2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                }
            },
            "depends_on": []
        }
    ]
}
